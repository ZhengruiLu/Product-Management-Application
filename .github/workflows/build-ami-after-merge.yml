name: build ami after merge

on:
  push:
    branches:
      - main
      - a07-webapp
      - a09

jobs:
  validate-packer-template:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup HashiCorp Packer
        uses: hashicorp/setup-packer@v2.0.0
        with:
          version: latest

      - name: touch jar
        run: touch /tmp/ProductManager-0.0.1-SNAPSHOT.jar

      - name: touch file
        run: touch /tmp/cloudwatch-config.json

      - name: Format Packer Template
        run: packer fmt scripts/app.pkr.hcl

      - name: Validate Packer Template
        run: packer validate scripts/app.pkr.hcl

  pack-java-jar:
    runs-on: ubuntu-latest
    needs: validate-packer-template

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build with Maven
        working-directory: ./ProductManager
        run: mvn package

      - name: Save JAR Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ProductManager-0.0.1-SNAPSHOT.jar
          path: ./ProductManager/target/ProductManager-0.0.1-SNAPSHOT.jar

  build-ami:
    runs-on: ubuntu-latest
    needs: pack-java-jar
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup HashiCorp Packer
        uses: hashicorp/setup-packer@v2.0.0
        with:
          version: latest

      - name: Download JAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: ProductManager-0.0.1-SNAPSHOT.jar
          path: /tmp

      - name: Copy JAR Artifact to Packer Directory
        run: cp /tmp/ProductManager-0.0.1-SNAPSHOT.jar scripts/

      - name: Build Image with Packer
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-1
        run: packer build scripts/app.pkr.hcl

  update-latest-ami-and-instance:
    runs-on: ubuntu-latest
    needs: build-ami
    steps:
      - name: Configure AWS DEMO Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Get Latest AMI ID
        id: get-ami-id
        run: |
          LATEST_AMI_ID=$(aws ec2 describe-images --owners 856116334851 --filters '[{"Name":"name", "Values":["csye6225_*"]}, {"Name":"state","Values":["available"]}]' --query "reverse(sort_by(Images, &CreationDate))[0].ImageId")
          echo "latest AMI ID: $LATEST_AMI_ID"
          echo "LATEST_AMI_ID=$LATEST_AMI_ID" >> $GITHUB_ENV

      - name: Get Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters '[{"Name":"launch-template-name","Values":["asg_launch_config"]}]' --query "LaunchTemplates[0].LaunchTemplateId")
          echo "launch Template ID: $LAUNCH_TEMPLATE_ID"
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      - name: Create a launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name asg_launch_config --version-description LatestVersion --source-version '$Latest' --launch-template-data '{"ImageId":'$LATEST_AMI_ID'}'

      - name: refresh instance
        run: aws autoscaling start-instance-refresh --auto-scaling-group-name csye6225-asg-spring2023